program = ${ SOI ~ total_ws* ~  (generic_func)* ~ EOI }

char = @{ 'a'..'z' | 'A'..'Z' | '0'..'9' | "_" }
newline = _{ ws? ~ "\n" ~ ws? }
ws = _{ (" " | "\t")+ }
total_ws = _{ ws | newline }

str_content = @{((!"\"" ~ ANY) | ("\\\""))*}
chars_singleline = @{(!newline ~ ANY)*}

string = _{ "\"" ~ str_content ~ "\"" }

int_content = _{ ('0'..'9')+ }
int = ${ int_content }



mod_winkey = @{ "#" }
mod_alt = @{ "!" }
mod_ctrl = @{ "^" }
mod_shift = @{ "+" }
mod_concat = @{ "&" } // TODO: Not Supported yet.
mod_altgr = @{ "<^>!" } // TODO: Not Supported yet.
mod_wildcard = @{ "*" } // TODO: Not Supported yet.
mod_block = @{ "~" } // TODO: Not Supported yet.
mod_force_hook = @{ "$" } // TODO: Not Supported yet.
mod_up = @{ " UP" } // TODO: Not Supported yet.


func_modifiers_required = ${ 
    (mod_winkey |
    mod_alt |
    mod_ctrl |
    mod_shift)+
}

func_modifiers = ${ 
    (mod_winkey |
    mod_alt |
    mod_ctrl |
    mod_shift)*
}

func_name = @{ char+ }
func = ${ func_name ~ ws? ~ "{" ~ total_ws* ~ some_statements ~ total_ws* ~ "}" ~ total_ws* }

// TODO: this really isn't a func_name but whatever
hotkey = ${ func_modifiers ~ func_name ~ "::"  ~ newline ~ total_ws*  ~ some_statements ~  total_ws* }
generic_func = _{ (func | hotkey) }

some_statements = ${ some_statements_internal ~ newline* ~ return_statement }
some_statements_internal = _{
    statement ~ newline* ~ some_statements_internal |
    statement ~ newline*
}


statement = _{ log_statement | call_statement | send_statement | send_raw_statement | sleep_statement }

// TODO: Send doesn't required "" around strings... Treats them as text. Why use it here?
log_statement = ${ "Log" ~ ","? ~ ws ~ string }
call_statement = ${ "Call" ~ ","? ~ ws ~ func_name }
return_statement = @{ "Return" | "return" }
send_statement = ${ "Send" ~ ","? ~  ((ws ~ func_modifiers_required ~ chars_singleline) | (ws ~ chars_singleline)) }
send_raw_statement = ${ "SendRaw" ~ ","? ~  ws ~ chars_singleline }
sleep_statement = ${ "Sleep" ~ ","? ~ ws ~ int }
